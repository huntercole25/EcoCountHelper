document()
library(devtools)
document()
library(gggplot2)
library(ggplot2)
?geom_vline()
data("EpfuNb2", package = "EcoCountHelper")
library(devtools)
document
document()
document()
document()
library(EcoCountHelper)
?DumbGrid
data("EpfuNb2", package = "EcoCountHelper")
EffectsPlotter(EpfuNb2, c(":)", "!", "argument", "FirstColWidth",
"the", "with", "adjusted", "be", "to",
"need", "plots", "These"))
ExPlot <- EpfuNb2EffectsPlot
TestGrid <- DumbGrid(ExPlot, ExPlot, ExPlot, ExPlot,
Ncols = 2)
TestGrid
document()
library(devtools)
library(devtools)
install_github("huntercole25/EcoCountHelper")
library(EcoCountHelper)
library(devtools)
library(roxygen2)
document()
document()
document()
junk <- readRDS("~/Documents/GRTE_1617/Data/Models/MyvoNb2.rds")
class(junk) == "glmmTMB"
class(junk)
"glmmTMB %in% class(junk)
"glmmTMB" %in% class(junk)
DumbGrid <- function(..., Ncols, FirstColWidth = 1, SharedLegend = F){
plots <- list(...)
nplot <- length(plots)
for(i in setdiff(seq(1, nplot, 1), seq(1, nplot, Ncols))){
plots[[i]] <- plots[[i]] + theme(axis.title.y = element_blank(), axis.text.y = element_blank())
}
plnums <- seq(1, nplot, 1)
nox <- plnums[plnums < max(seq(1, nplot, Ncols))]
for(i in nox){
plots[[i]] <- plots[[i]] + theme(axis.title.x = element_blank())
}
if(SharedLegend == T){
shleg <- get_legend(plots[[1]])
for(i in 1:length(plots)){
plots[[i]] <- plots[[i]] + theme(legend.position = "none")
}
}
Tplot <- plot_grid(plotlist = plots, ncol = Ncols, rel_widths = c(FirstColWidth,rep(1, Ncols - 1)))
if(SharedLegend == T){
Tplot <- plot_grid(Tplot, shleg, ncol = 2, rel_widths = c(9,1))
}else{
Tplot <- plot_grid(plotlist = plots, ncol = Ncols, align = "hv", axis = "tblr")
}
Tplot
}
library(ggplot2)
junkp <- ggplot(data = cars, aes(speed, dist)) +
geom_line()
junkp
DumbGrid(junkp, junkp, junkp, junkp, Ncols = 2)
require(cowplot)
DumbGrid(junkp, junkp, junkp, junkp, Ncols = 2)
DumbGrid(junkp, junkp, junkp, junkp, Ncols = 2) %>%
junkp <- ggplot(data = cars, aes(speed, dist)) +
geom_line() +
theme(axis.text.y = element_text(size = 36))
DumbGrid(junkp, junkp, junkp, junkp, Ncols = 2) %>%
DumbGrid(junkp, junkp, junkp, junkp, Ncols = 2)
DumbGrid <- function(..., Ncols, FirstColWidth = 1, SharedLegend = F){
plots <- list(...)
nplot <- length(plots)
for(i in setdiff(seq(1, nplot, 1), seq(1, nplot, Ncols))){
plots[[i]] <- plots[[i]] + theme(axis.title.y = element_blank(), axis.text.y = element_blank())
}
plnums <- seq(1, nplot, 1)
nox <- plnums[plnums < max(seq(1, nplot, Ncols))]
for(i in nox){
plots[[i]] <- plots[[i]] + theme(axis.title.x = element_blank())
}
if(SharedLegend == T){
shleg <- get_legend(plots[[1]])
for(i in 1:length(plots)){
plots[[i]] <- plots[[i]] + theme(legend.position = "none")
}
}
Tplot <- plot_grid(plotlist = plots, ncol = Ncols, rel_widths = c(FirstColWidth,rep(1, Ncols - 1)))
if(SharedLegend == T){
Tplot <- plot_grid(Tplot, shleg, ncol = 2, rel_widths = c(9,1))
}else{
Tplot <- plot_grid(plotlist = plots, ncol = Ncols, align = "hv", axis = "tbr")
}
Tplot
}
DumbGrid(junkp, junkp, junkp, junkp, Ncols = 2)
DumbGrid(junkp, junkp, junkp, junkp, Ncols = 2, FirstColWidth = 1.4)
DumbGrid(junkp, junkp, junkp, junkp, Ncols = 2, FirstColWidth = 2)
DumbGrid(junkp, junkp, junkp, junkp, Ncols = 2, FirstColWidth = 3)
DumbGrid <- function(..., Ncols, FirstColWidth = 1, SharedLegend = F){
plots <- list(...)
nplot <- length(plots)
for(i in setdiff(seq(1, nplot, 1), seq(1, nplot, Ncols))){
plots[[i]] <- plots[[i]] + theme(axis.title.y = element_blank(), axis.text.y = element_blank())
}
plnums <- seq(1, nplot, 1)
nox <- plnums[plnums < max(seq(1, nplot, Ncols))]
for(i in nox){
plots[[i]] <- plots[[i]] + theme(axis.title.x = element_blank())
}
if(SharedLegend == T){
shleg <- get_legend(plots[[1]])
for(i in 1:length(plots)){
plots[[i]] <- plots[[i]] + theme(legend.position = "none")
}
}
Tplot <- plot_grid(plotlist = plots, ncol = Ncols, rel_widths = c(FirstColWidth,rep(1, Ncols - 1)))
if(SharedLegend == T){
Tplot <- plot_grid(Tplot, shleg, ncol = 2, rel_widths = c(9,1))
}else{
Tplot <- plot_grid(plotlist = plots, ncol = Ncols, align = "hv", axis = "tbr")
}
Tplot
}
DumbGrid(junkp, junkp, junkp, junkp, Ncols = 2, FirstColWidth = 40)
DumbGrid <- function(..., Ncols, FirstColWidth = 1, SharedLegend = F){
plots <- list(...)
nplot <- length(plots)
for(i in setdiff(seq(1, nplot, 1), seq(1, nplot, Ncols))){
plots[[i]] <- plots[[i]] + theme(axis.title.y = element_blank(), axis.text.y = element_blank())
}
plnums <- seq(1, nplot, 1)
nox <- plnums[plnums < max(seq(1, nplot, Ncols))]
for(i in nox){
plots[[i]] <- plots[[i]] + theme(axis.title.x = element_blank())
}
if(SharedLegend == T){
shleg <- get_legend(plots[[1]])
for(i in 1:length(plots)){
plots[[i]] <- plots[[i]] + theme(legend.position = "none")
}
}
Tplot <- plot_grid(plotlist = plots, ncol = Ncols, rel_widths = c(FirstColWidth,rep(1, Ncols - 1)))
if(SharedLegend == T){
Tplot <- plot_grid(Tplot, shleg, ncol = 2, rel_widths = c(9,1))
}else{
Tplot <- plot_grid(plotlist = plots, ncol = Ncols, align = "v", axis = "tbr")
}
Tplot
}
DumbGrid(junkp, junkp, junkp, junkp, Ncols = 2, FirstColWidth = 40)
DumbGrid <- function(..., Ncols, FirstColWidth = 1, SharedLegend = F){
plots <- list(...)
nplot <- length(plots)
for(i in setdiff(seq(1, nplot, 1), seq(1, nplot, Ncols))){
plots[[i]] <- plots[[i]] + theme(axis.title.y = element_blank(), axis.text.y = element_blank())
}
plnums <- seq(1, nplot, 1)
nox <- plnums[plnums < max(seq(1, nplot, Ncols))]
for(i in nox){
plots[[i]] <- plots[[i]] + theme(axis.title.x = element_blank())
}
if(SharedLegend == T){
shleg <- get_legend(plots[[1]])
for(i in 1:length(plots)){
plots[[i]] <- plots[[i]] + theme(legend.position = "none")
}
}
Tplot <- plot_grid(plotlist = plots, ncol = Ncols, rel_widths = c(FirstColWidth,rep(1, Ncols - 1)))
if(SharedLegend == T){
Tplot <- plot_grid(Tplot, shleg, ncol = 2, rel_widths = c(9,1))
}else{
Tplot <- plot_grid(plotlist = plots, ncol = Ncols, align = "v", axis = "tblr")
}
Tplot
}
DumbGrid(junkp, junkp, junkp, junkp, Ncols = 2, FirstColWidth = 40)
?plot_grid
DumbGrid <- function(..., Ncols, FirstColWidth = 1, SharedLegend = F){
plots <- list(...)
nplot <- length(plots)
for(i in setdiff(seq(1, nplot, 1), seq(1, nplot, Ncols))){
plots[[i]] <- plots[[i]] + theme(axis.title.y = element_blank(), axis.text.y = element_blank())
}
plnums <- seq(1, nplot, 1)
nox <- plnums[plnums < max(seq(1, nplot, Ncols))]
for(i in nox){
plots[[i]] <- plots[[i]] + theme(axis.title.x = element_blank())
}
if(SharedLegend == T){
shleg <- get_legend(plots[[1]])
for(i in 1:length(plots)){
plots[[i]] <- plots[[i]] + theme(legend.position = "none")
}
}
Tplot <- plot_grid(plotlist = plots, ncol = Ncols, rel_widths = c(FirstColWidth,rep(1, Ncols - 1)),
align = "v", axis = "tblr")
if(SharedLegend == T){
Tplot <- plot_grid(Tplot, shleg, ncol = 2, rel_widths = c(9,1))
}
Tplot
}
DumbGrid(junkp, junkp, junkp, junkp, Ncols = 2, FirstColWidth = 40)
DumbGrid(junkp, junkp, junkp, junkp, Ncols = 2)
DumbGrid <- function(..., Ncols, FirstColWidth = 1, SharedLegend = F){
plots <- list(...)
nplot <- length(plots)
for(i in setdiff(seq(1, nplot, 1), seq(1, nplot, Ncols))){
plots[[i]] <- plots[[i]] + theme(axis.title.y = element_blank(), axis.text.y = element_blank())
}
plnums <- seq(1, nplot, 1)
nox <- plnums[plnums < max(seq(1, nplot, Ncols))]
for(i in nox){
plots[[i]] <- plots[[i]] + theme(axis.title.x = element_blank())
}
if(SharedLegend == T){
shleg <- get_legend(plots[[1]])
for(i in 1:length(plots)){
plots[[i]] <- plots[[i]] + theme(legend.position = "none")
}
}
Tplot <- plot_grid(plotlist = plots, ncol = Ncols, rel_widths = c(FirstColWidth,rep(1, Ncols - 1)),
align = "v", axis = "tbr")
if(SharedLegend == T){
Tplot <- plot_grid(Tplot, shleg, ncol = 2, rel_widths = c(9,1))
}
Tplot
}
DumbGrid(junkp, junkp, junkp, junkp, Ncols = 2)
DumbGrid(junkp, junkp, junkp, junkp, Ncols = 2, FirstColWidth = 2)
DumbGrid(junkp, junkp, junkp, junkp, Ncols = 2, FirstColWidth = 3)
# Load packages ####
library(glmmTMB) # negative binomial
library(DHARMa) #to look at the Q-Q plots
library(ggplot2)
library(dplyr)
library(plyr)
library(performance)
library(effects)
# Setup data ####
BAT_long<-read.csv("Data/Bat_Long.csv")
SppAccp<-read.csv("Data/SppAccpData.csv")
Traits<-read.csv("Data/Bat_Traits.csv") # add in bat traits
BAT_long<-merge(BAT_long,Traits,by="Species",all.x=T) # merge datasets
BAT_long$FreqDiff<-(BAT_long$PeakFreq-(BAT_long$nightMed/1000)) # create frequency difference metric
BAT_long <- merge(BAT_long, SppAccp, by = c("SiteDistance", "Year", "Species", "daynum"), all.x = T,
all.y = F)
# Setup data ####
BAT_long<-read.csv("~/Documents/Phantom_Rivers_Birds_Bats/Data/Bat_Long.csv")
BAT_long
BAT_long[["Site"]][CU02_MID]
BAT_long[["Site"]]["CU02_MID"]
BAT_long[["Site"]][BAT_long[["Site" == "CU02_MID"]
BAT_long[["Site"]][BAT_long[["Site"]] == "CU02_MID"]
BAT_long[["Site"]][BAT_long[["Site"]] == "CU02"]
BAT_long[BAT_long[["Site"]] == "CU02",]
DistFitPlotter <- function(Splitters, Data, GroupCol, GroupList, ThemeBlack = T){
Plotter <- function(GroupName){
FullData <- get(deparse(substitute(Data)))
Count <- FullData[[GroupCol]][FullData[[GroupCol]] == GroupName]
Params <- list()
for(i in Splitters){
Params[[i]] <- FullData[[i]]
}
VarData <- aggregate(Count, Params, FUN = var)[[length(Splitters)+1]]
MeanData <- aggregate(Count, Params, FUN = mean)[[length(Splitters)+1]]
MeanVarData <- as.data.frame(cbind(VarData, MeanData))
if(ThemeBlack == T){pocol = "grey80"}else{pocol = "black"}
TmpPlot <- ggplot(data = MeanVarData, aes(x = .data[["MeanData"]], y = .data[["VarData"]])) +
geom_point(color = pocol) +
geom_smooth(method = "lm", formula = y~x-1, aes(color = "NB1"), lty = 1) + #NB1
geom_smooth(method = "lm", formula = y ~ I(x^2) + offset(x) - 1, aes(color = "NB2"), lty = 1) + #NB2
geom_abline(aes(intercept = 0, slope = 1, color = "Poisson"), lty = 2) + #Poisson
scale_color_manual(name = "Families", values = c("green", "purple", "red")) +
labs(title = GroupName, x = "Mean", y = "Variance") +
theme_light() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
if(ThemeBlack == T){
TmpPlot <- TmpPlot + theme_nocturnal()
}
assign(paste0(GroupName, "DistPlot"), TmpPlot, pos = .GlobalEnv)
}
lapply(GroupList, FUN = Plotter)
}
DistFitPlotter <- function(Splitters, Data, GroupCol, GroupList, ThemeBlack = T){
Plotter <- function(GroupName){
FullData <- get(deparse(substitute(Data)))
Count <- FullData[[GroupCol]][FullData[[GroupCol]] == GroupName]
Params <- list()
for(i in Splitters){
Params[[i]] <- FullData[[i]]
}
VarData <- aggregate(Count, Params, FUN = var)[[length(Splitters)+1]]
MeanData <- aggregate(Count, Params, FUN = mean)[[length(Splitters)+1]]
MeanVarData <- as.data.frame(cbind(VarData, MeanData))
if(ThemeBlack == T){pocol = "grey80"}else{pocol = "black"}
TmpPlot <- ggplot(data = MeanVarData, aes(x = .data[["MeanData"]], y = .data[["VarData"]])) +
geom_point(color = pocol) +
geom_smooth(method = "lm", formula = y~x-1, aes(color = "NB1"), lty = 1) + #NB1
geom_smooth(method = "lm", formula = y ~ I(x^2) + offset(x) - 1, aes(color = "NB2"), lty = 1) + #NB2
geom_abline(aes(intercept = 0, slope = 1, color = "Poisson"), lty = 2) + #Poisson
scale_color_manual(name = "Families", values = c("green", "purple", "red")) +
labs(title = GroupName, x = "Mean", y = "Variance") +
theme_light() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
if(ThemeBlack == T){
TmpPlot <- TmpPlot + theme_nocturnal()
}
assign(paste0(GroupName, "DistPlot"), TmpPlot, pos = .GlobalEnv)
}
lapply(GroupList, FUN = Plotter)
}
DistFitLong <- function(Splitters, Data, GroupCol, GroupList, ThemeBlack = T){
Plotter <- function(GroupName){
FullData <- get(deparse(substitute(Data)))
Count <- FullData[[GroupCol]][FullData[[GroupCol]] == GroupName]
Params <- list()
for(i in Splitters){
Params[[i]] <- FullData[[i]]
}
VarData <- aggregate(Count, Params, FUN = var)[[length(Splitters)+1]]
MeanData <- aggregate(Count, Params, FUN = mean)[[length(Splitters)+1]]
MeanVarData <- as.data.frame(cbind(VarData, MeanData))
if(ThemeBlack == T){pocol = "grey80"}else{pocol = "black"}
TmpPlot <- ggplot(data = MeanVarData, aes(x = .data[["MeanData"]], y = .data[["VarData"]])) +
geom_point(color = pocol) +
geom_smooth(method = "lm", formula = y~x-1, aes(color = "NB1"), lty = 1) + #NB1
geom_smooth(method = "lm", formula = y ~ I(x^2) + offset(x) - 1, aes(color = "NB2"), lty = 1) + #NB2
geom_abline(aes(intercept = 0, slope = 1, color = "Poisson"), lty = 2) + #Poisson
scale_color_manual(name = "Families", values = c("green", "purple", "red")) +
labs(title = GroupName, x = "Mean", y = "Variance") +
theme_light() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
if(ThemeBlack == T){
TmpPlot <- TmpPlot + theme_nocturnal()
}
assign(paste0(GroupName, "DistPlot"), TmpPlot, pos = .GlobalEnv)
}
lapply(GroupList, FUN = Plotter)
}
DistFitLong("Year", BAT_long, "Species", c("Anpa", "Myev"))
DistFitLong <- function(Splitters, Data, GroupCol, GroupList, ThemeBlack = T){
Plotter <- function(GroupName){
FullData <- get(deparse(substitute(Data)))
Count <- FullData[[GroupCol]][FullData[[GroupCol]] == GroupName]
Params <- list()
for(i in Splitters){
Params[[i]] <- FullData[[i]][FullData[[GroupCol]] == GroupName]
}
VarData <- aggregate(Count, Params, FUN = var)[[length(Splitters)+1]]
MeanData <- aggregate(Count, Params, FUN = mean)[[length(Splitters)+1]]
MeanVarData <- as.data.frame(cbind(VarData, MeanData))
if(ThemeBlack == T){pocol = "grey80"}else{pocol = "black"}
TmpPlot <- ggplot(data = MeanVarData, aes(x = .data[["MeanData"]], y = .data[["VarData"]])) +
geom_point(color = pocol) +
geom_smooth(method = "lm", formula = y~x-1, aes(color = "NB1"), lty = 1) + #NB1
geom_smooth(method = "lm", formula = y ~ I(x^2) + offset(x) - 1, aes(color = "NB2"), lty = 1) + #NB2
geom_abline(aes(intercept = 0, slope = 1, color = "Poisson"), lty = 2) + #Poisson
scale_color_manual(name = "Families", values = c("green", "purple", "red")) +
labs(title = GroupName, x = "Mean", y = "Variance") +
theme_light() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
if(ThemeBlack == T){
TmpPlot <- TmpPlot + theme_nocturnal()
}
assign(paste0(GroupName, "DistPlot"), TmpPlot, pos = .GlobalEnv)
}
lapply(GroupList, FUN = Plotter)
}
DistFitLong("Year", BAT_long, "Species", c("Anpa", "Myev"))
BAT_long
Splitters = "Year"
Data = BAT_long
GroupCol = "Species"
GroupList = c("Anpa", "Myev")
Plotter <- function(GroupName){
FullData <- get(deparse(substitute(Data)))
Count <- FullData[[GroupCol]][FullData[[GroupCol]] == GroupName]
Params <- list()
for(i in Splitters){
Params[[i]] <- FullData[[i]][FullData[[GroupCol]] == GroupName]
}
VarData <- aggregate(Count, Params, FUN = var)[[length(Splitters)+1]]
MeanData <- aggregate(Count, Params, FUN = mean)[[length(Splitters)+1]]
MeanVarData <- as.data.frame(cbind(VarData, MeanData))
if(ThemeBlack == T){pocol = "grey80"}else{pocol = "black"}
TmpPlot <- ggplot(data = MeanVarData, aes(x = .data[["MeanData"]], y = .data[["VarData"]])) +
geom_point(color = pocol) +
geom_smooth(method = "lm", formula = y~x-1, aes(color = "NB1"), lty = 1) + #NB1
geom_smooth(method = "lm", formula = y ~ I(x^2) + offset(x) - 1, aes(color = "NB2"), lty = 1) + #NB2
geom_abline(aes(intercept = 0, slope = 1, color = "Poisson"), lty = 2) + #Poisson
scale_color_manual(name = "Families", values = c("green", "purple", "red")) +
labs(title = GroupName, x = "Mean", y = "Variance") +
theme_light() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
if(ThemeBlack == T){
TmpPlot <- TmpPlot + theme_nocturnal()
}
assign(paste0(GroupName, "DistPlot"), TmpPlot, pos = .GlobalEnv)
}
lapply(GroupList, FUN = Plotter)
GroupName = "Myev"
FullData <- get(deparse(substitute(Data)))
Count <- FullData[[GroupCol]][FullData[[GroupCol]] == GroupName]
Count
CountCol = "Number"
FullData <- get(deparse(substitute(Data)))
Count <- FullData[[CountCol]][FullData[[GroupCol]] == GroupName]
Count
DistFitLong <- function(Splitters, Data, CountCol, GroupCol, GroupList, ThemeBlack = T){
Plotter <- function(GroupName){
FullData <- get(deparse(substitute(Data)))
Count <- FullData[[CountCol]][FullData[[GroupCol]] == GroupName]
Params <- list()
for(i in Splitters){
Params[[i]] <- FullData[[i]][FullData[[GroupCol]] == GroupName]
}
VarData <- aggregate(Count, Params, FUN = var)[[length(Splitters)+1]]
MeanData <- aggregate(Count, Params, FUN = mean)[[length(Splitters)+1]]
MeanVarData <- as.data.frame(cbind(VarData, MeanData))
if(ThemeBlack == T){pocol = "grey80"}else{pocol = "black"}
TmpPlot <- ggplot(data = MeanVarData, aes(x = .data[["MeanData"]], y = .data[["VarData"]])) +
geom_point(color = pocol) +
geom_smooth(method = "lm", formula = y~x-1, aes(color = "NB1"), lty = 1) + #NB1
geom_smooth(method = "lm", formula = y ~ I(x^2) + offset(x) - 1, aes(color = "NB2"), lty = 1) + #NB2
geom_abline(aes(intercept = 0, slope = 1, color = "Poisson"), lty = 2) + #Poisson
scale_color_manual(name = "Families", values = c("green", "purple", "red")) +
labs(title = GroupName, x = "Mean", y = "Variance") +
theme_light() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
if(ThemeBlack == T){
TmpPlot <- TmpPlot + theme_nocturnal()
}
assign(paste0(GroupName, "DistPlot"), TmpPlot, pos = .GlobalEnv)
}
lapply(GroupList, FUN = Plotter)
}
DistFitLong("Year", BAT_long, "Number", "Species", c("Anpa", "Myev"))
library(EcoCountHelper)
DistFitLong("Year", BAT_long, "Number", "Species", c("Anpa", "Myev"))
DistFitLong(c("Year", "Site"), BAT_long, "Number", "Species", c("Anpa", "Myev"))
ModelCompare
junk <- readRDS("~/Documents/Phantom_Rivers_Birds_Bats/Model_Objects/BAT_NB2_Diff.rds")
ResidPlotLong <- function(Data, CountCol, GroupCol, GroupPat, ModNames, Nsims = 1000, TestVals = T){
ResidPlotterSub <- function(GroupMod){
TmpMod <- get(Filter(function(x) inherits(get(x), "glmmTMB"), ls(pattern = GroupMod,
pos = .GlobalEnv)), pos = .GlobalEnv)
Group <- regmatches(GroupMod, regexpr(GroupPat, GroupMod))
ModTab <- simulate(TmpMod, nsim = Nsims)
SimMod <- do.call(cbind, ModTab)
SimModDharma <- createDHARMa(simulatedResponse = SimMod, observedResponse = Data[[CountCol]][Data[[GroupCol]] == Group],
fittedPredictedResponse = predict(TmpMod), integerResponse = TRUE)
GroupResidTests <- testResiduals(SimModDharma)
title(sub = GroupMod, font.sub = 2)
ResidPlot <- recordPlot()
assign(paste0(GroupMod, "SimResidPlot"), ResidPlot, pos = .GlobalEnv)
if(TestVals == T){assign(paste0(GroupMod, "ResidTests"), GroupResidTests, pos = .GlobalEnv)}
}
lapply(ModNames, ResidPlotterSub)
}
ResidPlotLong(BAT_long, "Number", "Species", "junk", junk)
ResidPlotLong(BAT_long, "Number", "Species", "junk", "junk")
ResidPlotLong <- function(Data, CountCol, GroupCol, GroupPat, ModNames, Nsims = 1000, TestVals = T){
ResidPlotterSub <- function(GroupMod){
TmpMod <- get(Filter(function(x) inherits(get(x), "glmmTMB"), ls(pattern = GroupMod,
pos = .GlobalEnv)), pos = .GlobalEnv)
TmpData <- get(deparse(substitute(Data)), envir = .GlobalEnv)
TmpData <- TmpData[[CountCol]][TmpData[[GroupCol]] == Group]
Group <- regmatches(GroupMod, regexpr(GroupPat, GroupMod))
ModTab <- simulate(TmpMod, nsim = Nsims)
SimMod <- do.call(cbind, ModTab)
SimModDharma <- createDHARMa(simulatedResponse = SimMod, observedResponse = TmpData,
fittedPredictedResponse = predict(TmpMod), integerResponse = TRUE)
GroupResidTests <- testResiduals(SimModDharma)
title(sub = GroupMod, font.sub = 2)
ResidPlot <- recordPlot()
assign(paste0(GroupMod, "SimResidPlot"), ResidPlot, pos = .GlobalEnv)
if(TestVals == T){assign(paste0(GroupMod, "ResidTests"), GroupResidTests, pos = .GlobalEnv)}
}
lapply(ModNames, ResidPlotterSub)
}
ResidPlotLong(BAT_long, "Number", "Species", "junk", "junk")
ResidPlotLong <- function(Data, CountCol, GroupCol, GroupPat, ModNames, Nsims = 1000, TestVals = T){
ResidPlotterSub <- function(GroupMod){
TmpMod <- get(Filter(function(x) inherits(get(x), "glmmTMB"), ls(pattern = GroupMod,
pos = .GlobalEnv)), pos = .GlobalEnv)
Group <- regmatches(GroupMod, regexpr(GroupPat, GroupMod))
TmpData <- get(deparse(substitute(Data)), envir = .GlobalEnv)
TmpData <- TmpData[[CountCol]][TmpData[[GroupCol]] == Group]
ModTab <- simulate(TmpMod, nsim = Nsims)
SimMod <- do.call(cbind, ModTab)
SimModDharma <- createDHARMa(simulatedResponse = SimMod, observedResponse = TmpData,
fittedPredictedResponse = predict(TmpMod), integerResponse = TRUE)
GroupResidTests <- testResiduals(SimModDharma)
title(sub = GroupMod, font.sub = 2)
ResidPlot <- recordPlot()
assign(paste0(GroupMod, "SimResidPlot"), ResidPlot, pos = .GlobalEnv)
if(TestVals == T){assign(paste0(GroupMod, "ResidTests"), GroupResidTests, pos = .GlobalEnv)}
}
lapply(ModNames, ResidPlotterSub)
}
ResidPlotLong(BAT_long, "Number", "Species", "junk", "junk")
Data = BAT_long
MyevNb2 <- readRDS("~/Documents/Phantom_Rivers_Birds_Bats/Model_Objects/Bat_Species_Models/NB_Myev.rds")
ResidPlotLong(BAT_long, "Number", "Species", "^[[:alpha:]]{4}", "MyevNb2")
Sp <- "Myev"
ResidPlotLong(BAT_long, "Number", "Species", "^[[:alpha:]]{4}", "MyevNb2")
