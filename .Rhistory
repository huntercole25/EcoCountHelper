ResidPlotLong <- function(Data, CountCol, GroupCol, ModNames, GroupPat = "^[[:alnum:]]+", Nsims = 1000, TestVals = T, Looped = T){
ResidPlotterSub <- function(GroupMod){
TmpMod <- get(Filter(function(x) inherits(get(x), "glmmTMB"), ls(pattern = GroupMod,
pos = .GlobalEnv)), pos = .GlobalEnv)
Group <- regmatches(GroupMod, regexpr(GroupPat, GroupMod))
TmpFull <- Data[Data[[GroupCol]] == Group,]
TmpData <- Data[[CountCol]][Data[[GroupCol]] == Group]
if(Looped == T){
TmpMod <- update(TmpMod, data = TmpFull)
}
ModTab <- simulate(TmpMod, nsim = Nsims)
SimMod <- do.call(cbind, ModTab)
SimModDharma <- createDHARMa(simulatedResponse = SimMod, observedResponse = TmpData,
fittedPredictedResponse = predict(TmpMod), integerResponse = TRUE)
GroupResidTests <- testResiduals(SimModDharma)
title(sub = GroupMod, font.sub = 2)
ResidPlot <- recordPlot()
assign(paste0(GroupMod, "SimResidPlot"), ResidPlot, pos = .GlobalEnv)
if(TestVals == T){assign(paste0(GroupMod, "ResidTests"), GroupResidTests, pos = .GlobalEnv)}
}
lapply(ModNames, ResidPlotterSub)
}
ResidPlotLong(Data = BAT_long, CountCol = "Number", GroupCol = "Species", ModNames = "Myev_Mod")
?EcoCountHelper::EffectsPlotter
glmmTMB(formula = NULL, data = NULL)
EcoCountHelper::RealEffectText
library(EcoCountHelper)
?RealEffectText
RealEffectText(Myev_Mod, "scale(moonface)", 10, 2, BAT_long[["moonface"]][BAT_long$Species == "Myev"], "percent")
BAT_long$moonface
summary(Myev_Mod)
RealEffectText(Myev_Mod, "scale(moonface)", 10, 95, 1, BAT_long[["moonface"]][BAT_long$Species == "Myev"], "percent")
RealEffectText(Myev_Mod, "scale(moonface)", 1, 95, 1, BAT_long[["moonface"]][BAT_long$Species == "Myev"], "percent")
RealEffectText(Myev_Mod, "scale(moonface)", 0.1, 95, 1, BAT_long[["moonface"]][BAT_long$Species == "Myev"], "percent")
EffectsPlotter <- function(TopMods, ParamLabs = rownames(summary(TopMods[1])$coeff$cond), TopModCol = NULL, ConfInts = c(90, 80), Scaled = T,
ThemeBlack = T){
if(class("glmmTMB" %in% TopMods)){
TmpMod <- deparse(substitute(TopMods))
}else{
TmpMod <- get(deparse(substitute(TopMods)))
if(!is.null(TopModCol)){
TmpMod <- as.character(TmpMod[[TopModCol]])
}
}
EffectsPlotterSub <- function(TopMod){
SpMod <- get(TopMod, envir = .GlobalEnv)
PlotData <- data.table::as.data.table(summary(SpMod)$coeff$cond)
PlotData[,Param := rownames(summary(SpMod)$coeff$cond)]
PlotData[,Order := as.factor(c(1:nrow(PlotData)))]
if(ThemeBlack == T){
pocol = "grey80"
barcol = "grey60"
}else{
pocol = "black"
barcol = "grey40"
}
EffectsPlot <- ggplot(data = PlotData)
if(Scaled == T){
EffectsPlot <- EffectsPlot +
geom_vline(xintercept = 0, linetype = 2, size = 1, color = "red")
}
if(length(ConfInts) >= 1){
EffectsPlot <- EffectsPlot +
geom_errorbar(aes(xmin = Estimate - (`Std. Error`*qnorm(1-((100-ConfInts[1])/2/100))),
xmax = Estimate + (`Std. Error`*qnorm(1-((100-ConfInts[1])/2/100))),
x = Estimate, y = Order), color = barcol, size = 1, width = 0.7)
}
if(length(ConfInts) >= 2){
EffectsPlot <- EffectsPlot +
geom_errorbar(aes(xmin = Estimate - (`Std. Error`*qnorm(1-((100-ConfInts[2])/2/100))),
xmax = Estimate + (`Std. Error`*qnorm(1-((100-ConfInts[2])/2/100))),
x = Estimate, y = Order), color = barcol, size = 1, width = 0.5)
}
if(length(ConfInts) == 3){
EffectsPlot <- EffectsPlot +
geom_errorbar(aes(xmin = Estimate - (`Std. Error`*qnorm(1-((100-ConfInts[3])/2/100))),
xmax = Estimate + (`Std. Error`*qnorm(1-((100-ConfInts[3])/2/100))),
x = Estimate, y = Order), color = barcol, size = 1, width = 0.3)
}
EffectsPlot <- EffectsPlot +
geom_point(aes(x = Estimate, y = Order), color = pocol, size = 3) +
scale_y_discrete(labels = ParamLabs, drop = T) +
labs(x = "Estimate", y = "Term", title = TopMod) +
theme_light() +
theme(plot.title = element_text(hjust = 0.5))
if(ThemeBlack == T){EffectsPlot <- EffectsPlot + theme_nocturnal()}
assign(paste0(TopMod, "EffectsPlot"), EffectsPlot, envir = .GlobalEnv)
}
lapply(TmpMod, FUN = EffectsPlotterSub)
}
EffectsPlotter(Myev_Mod)
EffectsPlotter <- function(TopMods, ParamLabs = rownames(summary(TopMods[1])$coeff$cond), TopModCol = NULL, ConfInts = c(90, 80), Scaled = T,
ThemeBlack = T){
if("glmmTMB" %in% class(TopMods)){
TmpMod <- deparse(substitute(TopMods))
}else{
TmpMod <- get(deparse(substitute(TopMods)))
if(!is.null(TopModCol)){
TmpMod <- as.character(TmpMod[[TopModCol]])
}
}
EffectsPlotterSub <- function(TopMod){
SpMod <- get(TopMod, envir = .GlobalEnv)
PlotData <- data.table::as.data.table(summary(SpMod)$coeff$cond)
PlotData[,Param := rownames(summary(SpMod)$coeff$cond)]
PlotData[,Order := as.factor(c(1:nrow(PlotData)))]
if(ThemeBlack == T){
pocol = "grey80"
barcol = "grey60"
}else{
pocol = "black"
barcol = "grey40"
}
EffectsPlot <- ggplot(data = PlotData)
if(Scaled == T){
EffectsPlot <- EffectsPlot +
geom_vline(xintercept = 0, linetype = 2, size = 1, color = "red")
}
if(length(ConfInts) >= 1){
EffectsPlot <- EffectsPlot +
geom_errorbar(aes(xmin = Estimate - (`Std. Error`*qnorm(1-((100-ConfInts[1])/2/100))),
xmax = Estimate + (`Std. Error`*qnorm(1-((100-ConfInts[1])/2/100))),
x = Estimate, y = Order), color = barcol, size = 1, width = 0.7)
}
if(length(ConfInts) >= 2){
EffectsPlot <- EffectsPlot +
geom_errorbar(aes(xmin = Estimate - (`Std. Error`*qnorm(1-((100-ConfInts[2])/2/100))),
xmax = Estimate + (`Std. Error`*qnorm(1-((100-ConfInts[2])/2/100))),
x = Estimate, y = Order), color = barcol, size = 1, width = 0.5)
}
if(length(ConfInts) == 3){
EffectsPlot <- EffectsPlot +
geom_errorbar(aes(xmin = Estimate - (`Std. Error`*qnorm(1-((100-ConfInts[3])/2/100))),
xmax = Estimate + (`Std. Error`*qnorm(1-((100-ConfInts[3])/2/100))),
x = Estimate, y = Order), color = barcol, size = 1, width = 0.3)
}
EffectsPlot <- EffectsPlot +
geom_point(aes(x = Estimate, y = Order), color = pocol, size = 3) +
scale_y_discrete(labels = ParamLabs, drop = T) +
labs(x = "Estimate", y = "Term", title = TopMod) +
theme_light() +
theme(plot.title = element_text(hjust = 0.5))
if(ThemeBlack == T){EffectsPlot <- EffectsPlot + theme_nocturnal()}
assign(paste0(TopMod, "EffectsPlot"), EffectsPlot, envir = .GlobalEnv)
}
lapply(TmpMod, FUN = EffectsPlotterSub)
}
EffectsPlotter(Myev_Mod)
Myev_Mod[1]
?EffectsPlotter
EffectsPlotter <- function(TopMods, ParamLabs = NULL, TopModCol = NULL, ConfInts = c(90, 80), Scaled = T,
ThemeBlack = T){
if("glmmTMB" %in% class(TopMods)){
TmpMod <- deparse(substitute(TopMods))
}else{
TmpMod <- get(deparse(substitute(TopMods)))
if(!is.null(TopModCol)){
TmpMod <- as.character(TmpMod[[TopModCol]])
}
}
EffectsPlotterSub <- function(TopMod){
SpMod <- get(TopMod, envir = .GlobalEnv)
if(is.null(ParamLabs) == T){
ParamLabs = rownames(summary(SpMod)$coeff$cond)
}
PlotData <- data.table::as.data.table(summary(SpMod)$coeff$cond)
PlotData[,Param := rownames(summary(SpMod)$coeff$cond)]
PlotData[,Order := as.factor(c(1:nrow(PlotData)))]
if(ThemeBlack == T){
pocol = "grey80"
barcol = "grey60"
}else{
pocol = "black"
barcol = "grey40"
}
EffectsPlot <- ggplot(data = PlotData)
if(Scaled == T){
EffectsPlot <- EffectsPlot +
geom_vline(xintercept = 0, linetype = 2, size = 1, color = "red")
}
if(length(ConfInts) >= 1){
EffectsPlot <- EffectsPlot +
geom_errorbar(aes(xmin = Estimate - (`Std. Error`*qnorm(1-((100-ConfInts[1])/2/100))),
xmax = Estimate + (`Std. Error`*qnorm(1-((100-ConfInts[1])/2/100))),
x = Estimate, y = Order), color = barcol, size = 1, width = 0.7)
}
if(length(ConfInts) >= 2){
EffectsPlot <- EffectsPlot +
geom_errorbar(aes(xmin = Estimate - (`Std. Error`*qnorm(1-((100-ConfInts[2])/2/100))),
xmax = Estimate + (`Std. Error`*qnorm(1-((100-ConfInts[2])/2/100))),
x = Estimate, y = Order), color = barcol, size = 1, width = 0.5)
}
if(length(ConfInts) == 3){
EffectsPlot <- EffectsPlot +
geom_errorbar(aes(xmin = Estimate - (`Std. Error`*qnorm(1-((100-ConfInts[3])/2/100))),
xmax = Estimate + (`Std. Error`*qnorm(1-((100-ConfInts[3])/2/100))),
x = Estimate, y = Order), color = barcol, size = 1, width = 0.3)
}
EffectsPlot <- EffectsPlot +
geom_point(aes(x = Estimate, y = Order), color = pocol, size = 3) +
scale_y_discrete(labels = ParamLabs, drop = T) +
labs(x = "Estimate", y = "Term", title = TopMod) +
theme_light() +
theme(plot.title = element_text(hjust = 0.5))
if(ThemeBlack == T){EffectsPlot <- EffectsPlot + theme_nocturnal()}
assign(paste0(TopMod, "EffectsPlot"), EffectsPlot, envir = .GlobalEnv)
}
lapply(TmpMod, FUN = EffectsPlotterSub)
}
EffectsPlotter(Myev_Mod)
themee
theme
library(devtools)
install_github("huntercole25/EcoCountHelper")
library(EcoCountHelper)
?EffectsPlotter
install_github("huntercole25/EcoCountHelper")
install_github("huntercole25/EcoCountHelper", force = T)
library(EcoCountHelper)
?EffectsPlotter
library(EcoCountHelper)
?EffectsPlotter
library(devtools)
install_github("huntercole25/EcoCountHelper")
library(EcoCountHelper)
library(data.table)
library(roxygen2)
library(devtools)
?fread
document()
fread
library(pavo)
pavo::getspec
document()
library(EcoCountHelper)
library(EcoCountHelper)
package?EcoCountHelper
?EcoCountHelper
?ResidPlotLong
source('~/Documents/EcoCountHelper/R/ResidPlotWide.R', echo=TRUE)
document()
rm(ResidPlotWide())
rm(ResidPlotWide
)
document()
library(EcoCountHelper)
?ResidPlotWide
?scale
library(EcoCountHelper)
EcoCountHelper::BatData
library(tidyr)
data(BatData)
head(BatData)
?pivot_wider()
pivot_wider(BatData, names_from = "Count", values_from = c("Anpa", "Coto", "Epfu", "Euma", "Laci", "Lano", "Myca", "Myci", "Myev", "Mylu", "Myth", "Myvo", "Myyu"))
pivot_wider(BatData, names_from = c("Anpa", "Coto", "Epfu", "Euma", "Laci", "Lano", "Myca", "Myci", "Myev", "Mylu", "Myth", "Myvo", "Myyu"), values_from = c("Anpa", "Coto", "Epfu", "Euma", "Laci", "Lano", "Myca", "Myci", "Myev", "Mylu", "Myth", "Myvo", "Myyu"))
pivot_longer()
?pivot_longer()
pivot_longer(BatData, cols = c("Anpa", "Coto", "Epfu", "Euma", "Laci", "Lano", "Myca", "Myci", "Myev", "Mylu", "Myth", "Myvo", "Myyu"), names_to = "Count")
library(devtools)
BatDataLong <- pivot_longer(BatData, cols = c("Anpa", "Coto", "Epfu", "Euma", "Laci", "Lano", "Myca", "Myci", "Myev", "Mylu", "Myth", "Myvo", "Myyu"), names_to = "Count")
BatDataLong
library(data.table)
BatDataLong <- as.data.table(pivot_longer(BatData, cols = c("Anpa", "Coto", "Epfu", "Euma", "Laci", "Lano", "Myca", "Myci", "Myev", "Mylu", "Myth", "Myvo", "Myyu"), names_to = "Count"))
BatDataLong
BatDataLong <- as.data.table(pivot_longer(BatData, cols = c("Anpa", "Coto", "Epfu", "Euma", "Laci", "Lano", "Myca", "Myci", "Myev", "Mylu", "Myth", "Myvo", "Myyu"), names_to = "Species", values_to = "Count"))
BatDataLong
length(unique(BatDataLong$Species))
12207/13
BatDataWide <- BatData
use_data(BatDataLong)
use_data(BatDataWide)
data("EpfuNb1")
summary(EpfuNb1)
BatDataLong[,Site := as.factor(Site)]
BatDataLong[,Year := as.factor(Year)]
library(lubridate)
BatDataLong[,SampleDate := ymd(SampleDate, tz = "America/Denver")]
min(BatDataLong$SampleDate)
data("BatDataLong")
BatDataLong[,SampleDate := ymd(SampleDate, tz = "America/Denver")]
BatDataLong[,Year := as.factor(Year)]
BatDataLong[,Site := as.factor(Site)]
library(glmmTMB)
scale2 <- function(x){
(x - mean(x))/(2*sd(x))
}
for(i in c("Epfu", "Myev")){
SpNb1 <- glmmTMB(Count ~ scale2(StrWeight) + scale2(PropCool) + scale2(BrightCount) + Year + scale2(Yday) + scale2(Elev) +
scale2(WaterDist) + scale2(ManualDevelPct) + scale2(ManualForestPct) + scale2(MoonPct) + (1|Site),
data = BatDataLong[Species == i,], family = nbinom1(link = "log"))
assign(paste0(Species, "Nb1"), SpNb1, pos = .GlobalEnv)
SpNb2 <- glmmTMB(Count ~ scale2(StrWeight) + scale2(PropCool) + scale2(BrightCount) + Year + scale2(Yday) + scale2(Elev) +
scale2(WaterDist) + scale2(ManualDevelPct) + scale2(ManualForestPct) + scale2(MoonPct) + (1|Site),
data = BatDataLong[Species == i,], family = nbinom2(link = "log"))
assign(paste0(Species, "Nb2"), SpNb2, pos = .GlobalEnv)
}
for(i in c("Epfu", "Myev")){
SpNb1 <- glmmTMB(Count ~ scale2(StrWeight) + scale2(PropCool) + scale2(BrightCount) + Year + scale2(Yday) + scale2(Elev) +
scale2(WaterDist) + scale2(ManualDevelPct) + scale2(ManualForestPct) + scale2(MoonPct) + (1|Site),
data = BatDataLong[Species == i,], family = nbinom1(link = "log"))
assign(paste0(Species, "Nb1"), SpNb1, pos = .GlobalEnv)
SpNb2 <- glmmTMB(Count ~ scale2(StrWeight) + scale2(PropCool) + scale2(BrightCount) + Year + scale2(Yday) + scale2(Elev) +
scale2(WaterDist) + scale2(ManualDevelPct) + scale2(ManualForestPct) + scale2(MoonPct) + (1|Site),
data = BatDataLong[Species == i,], family = nbinom2(link = "log"))
assign(paste0(Species, "Nb2"), SpNb2, pos = .GlobalEnv)
}
for(i in c("Epfu", "Myev")){
SpNb1 <- glmmTMB(Count ~ scale2(StrWeight) + scale2(PropCool) + scale2(BrightCount) + Year + scale2(Yday) + scale2(Elev) +
scale2(WaterDist) + scale2(ManualDevelPct) + scale2(ManualForestPct) + scale2(MoonPct) + (1|Site),
data = BatDataLong[Species == i,], family = nbinom1(link = "log"))
assign(paste0(i, "Nb1"), SpNb1, pos = .GlobalEnv)
SpNb2 <- glmmTMB(Count ~ scale2(StrWeight) + scale2(PropCool) + scale2(BrightCount) + Year + scale2(Yday) + scale2(Elev) +
scale2(WaterDist) + scale2(ManualDevelPct) + scale2(ManualForestPct) + scale2(MoonPct) + (1|Site),
data = BatDataLong[Species == i,], family = nbinom2(link = "log"))
assign(paste0(i, "Nb2"), SpNb2, pos = .GlobalEnv)
}
for(i in c("Epfu", "Myev")){
SpNb1 <- glmmTMB(Count ~ scale2(StrWeight) + scale2(PropCool) + scale2(BrightCount) + Year + scale2(Yday) + scale2(Elev) +
scale2(WaterDist) + scale2(ManualDevelPct) + scale2(ManualForestPct) + scale2(MoonPct) + (1|Site),
data = BatDataLong[Species == i,], family = nbinom1(link = "log"))
assign(paste0(i, "Nb1Long"), SpNb1, pos = .GlobalEnv)
SpNb2 <- glmmTMB(Count ~ scale2(StrWeight) + scale2(PropCool) + scale2(BrightCount) + Year + scale2(Yday) + scale2(Elev) +
scale2(WaterDist) + scale2(ManualDevelPct) + scale2(ManualForestPct) + scale2(MoonPct) + (1|Site),
data = BatDataLong[Species == i,], family = nbinom2(link = "log"))
assign(paste0(i, "Nb2Long"), SpNb2, pos = .GlobalEnv)
}
EpfuNb1Wide <- data("EpfuNb1")
EpfuNb2Wide <- data("EpfuNb2")
data("EpfuNb1")
data("EpfuNb2")
EpfuNb1Wide <- EpfuNb1
EpfuNb2Wide <- EpfuNb2
MyevNb1Wide <- MyevNb1
MyevNb2Wide <- MyevNb2
summary(EpfuNb1Long)
summary(EpfuNb1Wide)
use_data(EpfuNb1Long)
use_data(EpfuNb1Wide)
summary(EpfuNb2Wide)
use_data(EpfuNb2Wide)
use_data(EpfuNb1Wide)
use_data(EpfuNb2Long)
use_data(MyevNb2Long)
use_data(MyevNb2Wide)
use_data(MyevNb1Wide)
use_data(MyevNb1Long)
summary(MyevNb2Long)
summary(BatDataWide)
summary(MyevNb1Wide)
data("MyevNb1")
data("MyevNb2")
summary(MyevNb1)
summary(EpfuNb1Wide)
summary(EpfuNb2Wide)
MyevNb1Wide <- MyevNb1
MyevNb2Wide <- MyevNb2
summary(MyevNb1Wide)
summary(MyevNb2Wide)
summary(EpfuNb2Wide)
summary(EpfuNb1Wide)
for(i in c("MyevNb1Wide", "MyevNb2Wide", "EpfuNb1Wide", "EpfuNb2Wide")){
TmpMod <- get(i)
update(TmpMod, data = BatDataLong)
assign(i, TmpMod)
}
?update
for(i in c("MyevNb1Wide", "MyevNb2Wide", "EpfuNb1Wide", "EpfuNb2Wide")){
TmpMod <- get(i)
update(TmpMod, data = BatDataWide)
assign(i, TmpMod)
}
for(i in c("MyevNb1Wide", "MyevNb2Wide", "EpfuNb1Wide", "EpfuNb2Wide")){
TmpMod <- get(i)
Species <- substr(i, 1, 4)
update(TmpMod, data = BatDataWide)
assign(i, TmpMod)
}
MyevNb1Wide
MyevNb2Wide
summary(MyevNb1Wide)
summary(MyevNb2Wide)
summary(EpfuNb2Wide)
summary(EpfuNb1Wide)
for(i in c("MyevNb1Wide", "MyevNb2Wide", "EpfuNb1Wide", "EpfuNb2Wide")){
TmpMod <- get(i)
Species <- substr(i, 1, 4)
TmpMod <- update(TmpMod, data = BatDataWide)
assign(i, TmpMod)
}
summary(EpfuNb1Wide)
summary(EpfuNb2Wide)
str(BatDataWide)
BatDataWide[,Year := as.factor(Year)]
BatDataWide[,Site := as.factor(Site)]
for(i in c("MyevNb1Wide", "MyevNb2Wide", "EpfuNb1Wide", "EpfuNb2Wide")){
TmpMod <- get(i)
Species <- substr(i, 1, 4)
TmpMod <- update(TmpMod, data = BatDataWide)
assign(i, TmpMod)
}
summary(MyevNb1Wide)
summary(MyevNb2Wide)
use_data(MyevNb1Wide)
use_data(MyevNb1Wide, overwrite = T)
use_data(MyevNb2Wide, overwrite = T)
use_data(EpfuNb2Wide, overwrite = T)
use_data(EpfuNb1Wide, overwrite = T)
str(BatDataWide)
use_data(BatDataWide, overwrite = T)
?scale
document()
rm(scale2())
rm(scale2)
document()
library(roxygen2)
document()
document()
BatDataWide
document
document()
library(EcoCountHelper)
library(EcoCountHelper)
?ResidPlotLong
data("BatDataLong", "EpfuNb2Long", "MyevNb2Long", package = "EcoCountHelper")
document
document()
library(EcoCountHelper)
?ResidPlotLong
data("BatDataLong", "EpfuNb2Long", "MyevNb2Long", package = "EcoCountHelper")
ResidPlotLong(BatData, "^[[:alpha:]]{4}", c("EpfuNb2Long", "MyevNb2ong"))
document()
library(EcoCountHelper)
?DistFitLong
data("BatDataLong", package = "EcoCountHelper")
DistFitLong(c("Site", "Year"),
BatDataLong, "Count", "Species", c("Myev", "Epfu"))
EpfuDistPlot
MyevDistPlot
?DistFitWide
data("BatDataWide", package = "EcoCountHelper")
DistFitWide(c("Site", "Year"),
BatDataWide, c("Myev", "Epfu"))
EpfuDistPlot
MyevDistPlot
?ResidPlotWide
data("BatDataWide", "EpfuNb2Wide", "MyevNb2Wide", package = "EcoCountHelper")
ResidPlotWide(BatDataWide, c("EpfuNb2Wide", "MyevNb2Wide"), "^[[:alpha:]]{4}")
EpfuNb2WideSimResidPlot
MyevNb2WideSimResidPlot
?ResidPlotLong
data("BatDataLong", "EpfuNb2Long", "MyevNb2Long", package = "EcoCountHelper")
ResidPlotLong(BatDataLong, "Count", "Species",
c("EpfuNb2Long", "MyevNb2ong"), "^[[:alpha:]]{4}")
?EcoCountHelper
document()
library(devtools)
library(roxygen2)
document()
library(EcoCountHelper)
?EcoCountHelper
document
document()
library(EcoCountHelper)
?EcoCountHelper
document()
library(EcoCountHelper)
?EcoCountHelper
?package:glmmTMB
?packageglmmTMB
?package glmmTMB
?EcoCountHelper
document()
library(EcoCountHelper)
?EcoCountHelper
library(data.table)
?fread
?data.table
?data.table::fwrite
document()
library(EcoCountHelper)
?EcoCountHelper
ResidPlotLong
?lapply
?apply
document()
library(EcoCountHelper)
?EcoCountHelper
document()
library(EcoCountHelper)
?EcoCountHelper
document()
library(EcoCountHelper)
?EcoCountHelper
document()
library(EcoCountHelper)
?EcoCountHelper
document()
library(EcoCountHelper)
?EcoCountHelper
?EffectsPlotter
data("EpfuNb2", "MyevNb2", package = "EcoCountHelper")
data("EpfuNb2", "MyevNb2", package = "EcoCountHelper")
document()
library(EcoCountHelper)
?EcoCountHelper
?EffectsPlotter
data("EpfuNb2Long", "MyevNb2Long", package = "EcoCountHelper")
Labels <- letters[1:12]
EffectsPlotter(EpfuNb2Long, Labels)
EpfuNb2LongEffectsPlot
EffectsPlotter(EpfuNb2Long, Labels, ThemeBlack = F)
