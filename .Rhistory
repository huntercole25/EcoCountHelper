ModVect <- Filter(function(x) inherits(get(x), "glmmTMB"), ls(pattern = Group, envir = .GlobalEnv))
ModVect
length(ModVect)
ModelCompare <- function(Groups, TopModOutName){
TopMods <- list()
ModCompSub <- function(Group){
ModVect <- Filter(function(x) inherits(get(x), "glmmTMB"), ls(pattern = Group, envir = .GlobalEnv))
if(length(ModVect == 0)){
print(paste("There were no glmmTMB class objects for the", Group,
"group. If any models did converge for the", Group,
"group, please ensure you correctly specified the vector provided to the group argument."))
}else{
AicList <- list()
for(i in 1:length(ModVect)){
TmpMod <- get(ModVect[i], envir = .GlobalEnv)
TmpAic <- data.table::data.table(Model = ModVect[i], Aic = AIC(TmpMod), Subj = Group)
AicList <- c(list(TmpAic), AicList)
}
FinalAicTab <- data.table::rbindlist(AicList)
assign(paste0(Group,"AIC"), FinalAicTab, envir = .GlobalEnv)
PreTopMods <- get("TopMods")
GroupTopMod <- data.table::data.table(Subj = Group, TopModel = na.omit(FinalAicTab)[Aic == min(Aic), Model])
TopMods <<- c(list(GroupTopMod), PreTopMods)
}
lapply(Groups, ModCompSub)
FinalToppers <- data.table::rbindlist(TopMods)
assign(deparse(substitute(TopModOutName)), FinalToppers, envir = .GlobalEnv)
}
}
ModelCompare("Grizzly", TopMods)
GrizzlyAIC
TopMods
ModelCompare(c("Bison", "Deer", "Elk", "Grizzly"), TopMods)
TopMods
summary(Elk_Nb2)
ModelCompare <- function(Groups, TopModOutName){
TopMods <- list()
ModCompSub <- function(Group){
ModVect <- Filter(function(x) inherits(get(x), "glmmTMB"), ls(pattern = Group, envir = .GlobalEnv))
if(length(ModVect == 0)){
print(paste("There were no glmmTMB class objects for the", Group,
"group. If any models did converge for the", Group,
"group, please ensure you correctly specified the vector provided to the group argument."))
}else{
AicList <- list()
for(i in 1:length(ModVect)){
TmpMod <- get(ModVect[i], envir = .GlobalEnv)
TmpAic <- data.table::data.table(Model = ModVect[i], Aic = AIC(TmpMod), Subj = Group)
AicList <- c(list(TmpAic), AicList)
}
FinalAicTab <- data.table::rbindlist(AicList)
assign(paste0(Group,"AIC"), FinalAicTab, envir = .GlobalEnv)
PreTopMods <- get("TopMods")
GroupTopMod <- data.table::data.table(Subj = Group, TopModel = na.omit(FinalAicTab)[Aic == min(Aic), Model])
TopMods <<- c(list(GroupTopMod), PreTopMods)
}
}
lapply(Groups, ModCompSub)
FinalToppers <- data.table::rbindlist(TopMods)
assign(deparse(substitute(TopModOutName)), FinalToppers, envir = .GlobalEnv)
}
ModelCompare(c("Bison", "Deer", "Elk", "Grizzly"), TopMods)
ModVect
ModVect <- Filter(function(x) inherits(get(x), "glmmTMB"), ls(pattern = Group, envir = .GlobalEnv))
ModVect
Group <- "Deer"
ModVect <- Filter(function(x) inherits(get(x), "glmmTMB"), ls(pattern = Group, envir = .GlobalEnv))
Modvect
ModVect
length(ModVect)
fwrite(junk, "C:/Users/Barber Lab/Downloads/FucksGiven.csv")
library(devtools)
install_github("huntercole25/EcoCountHelper", build = T, build_vignettes = T)
library(EcoCountHelper)
vignette("EcoCountHelperExample")
Data <- BatDataWide
ModNames <- "Epfu_Nb2"
GroupPat = "^[[:alnum:]]+"
Nsims = 1000
TestVals = T
get(Epfu_Nb2)
get("Epfu_Nb2")
Epfu_Nb2 <- get("Epfu_Nb2")
GroupMod <- "Epfu_Nb2"
TmpFile1 <- paste0(tempfile(), ".png")
TmpFile2 <- paste0(tempfile(), ".png")
TmpMod <- get(Filter(function(x) inherits(get(x), "glmmTMB"), ls(pattern = GroupMod,
pos = .GlobalEnv)), pos = .GlobalEnv)
Group <- regmatches(GroupMod, regexpr(GroupPat, GroupMod))
ModTab <- stats::simulate(TmpMod, nsim = Nsims)
SimMod <- do.call(cbind, ModTab)
SimModDharma <- DHARMa::createDHARMa(simulatedResponse = SimMod, observedResponse = Data[[Group]],
fittedPredictedResponse = predict(TmpMod), integerResponse = TRUE)
GroupResidTests <- DHARMa::testResiduals(SimModDharma, plot = F)
DHARMa::plotQQunif(SimModDharma, testUniformity = F, testOutliers = F, testDispersion = F)
DHARMa::testDispersion(SimModDharma)
DHARMa::testOutliers(SimModDharma)
testResiduals(SimModDharma)
DHARMa::testResiduals(SimModDharma)
library(devtools)
install_github("huntercole25/EcooCountHelper", build = T, build_vignettes = T)
install_github("huntercole25/EcoCountHelper", build = T, build_vignettes = T)
vignette("EcoCountHelperExample")
devtools::build_manual()
vignette("EcoCountHelperExample")
install(build = )
library(devtools)
install(build = T, build_vignettes = T)
vignette("EcoCountHelperExample")
isntall(build = T, build_vignettes = T)
install(build = T, build_vignettes = T)
vignette("EcoCountHelperExampple")
vignette("EcoCountHelperExample")
library(devtools)
install_github("huntercole25/EcoCountHelper", build = T, build_vignettes = T)
library(devtools)
library(roxygen2)
DistFitSG <- function(Splitters, Data, CountCol, ThemeBlack = T){
.data <- NULL
FullData <- get(deparse(substitute(Data)))
Params <- list()
for(i in Splitters){
Params[[i]] <- FullData[[i]]
}
VarData <- stats::aggregate(Count, Params, data = FullData, FUN = stats::var)[[length(Splitters)+1]]
MeanData <- stats::aggregate(Count, Params, data = FullData, FUN = mean)[[length(Splitters)+1]]
MeanVarData <- as.data.frame(cbind(VarData, MeanData))
if(ThemeBlack == T){pocol = "grey80"}else{pocol = "black"}
TmpPlot <- ggplot2::ggplot(data = MeanVarData, ggplot2::aes(x = .data[["MeanData"]], y = .data[["VarData"]])) +
ggplot2::geom_point(color = pocol) +
ggplot2::geom_smooth(method = "lm", formula = y~x-1, ggplot2::aes(color = "NB1"), lty = 1) + #NB1
ggplot2::geom_smooth(method = "lm", formula = y ~ I(x^2) + offset(x) - 1, ggplot2::aes(color = "NB2"), lty = 1) + #NB2
ggplot2::geom_abline(ggplot2::aes(intercept = 0, slope = 1, color = "Poisson"), lty = 2) + #Poisson
ggplot2::scale_color_manual(name = "Families", values = c("green", "purple", "red")) +
ggplot2::labs(title = GroupName, x = "Mean", y = "Variance") +
ggplot2::theme_light() +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, face = "bold"))
if(ThemeBlack == T){
TmpPlot <- TmpPlot + theme_nocturnal()
}
assign(paste0(GroupName, "DistPlot"), TmpPlot, pos = .GlobalEnv)
}
data("BatDataLong")
BatDataLong
SgData <- BatDataLong[Species=="Epfu"]
DistFitSG(c("Year", "Site"), SgData, "Count")
DistFitSG(c("Year", "Site"), SgData, Count)
DistFitSG(c("Year", "Site"), SgData, "Count")
DistFitSG <- function(Splitters, Data, CountCol, ThemeBlack = T){
.data <- NULL
FullData <- get(deparse(substitute(Data)))
Count <- FullData[[CountCol]]
Params <- list()
for(i in Splitters){
Params[[i]] <- FullData[[i]]
}
VarData <- stats::aggregate(Count, Params, data = FullData, FUN = stats::var)[[length(Splitters)+1]]
MeanData <- stats::aggregate(Count, Params, data = FullData, FUN = mean)[[length(Splitters)+1]]
MeanVarData <- as.data.frame(cbind(VarData, MeanData))
if(ThemeBlack == T){pocol = "grey80"}else{pocol = "black"}
TmpPlot <- ggplot2::ggplot(data = MeanVarData, ggplot2::aes(x = .data[["MeanData"]], y = .data[["VarData"]])) +
ggplot2::geom_point(color = pocol) +
ggplot2::geom_smooth(method = "lm", formula = y~x-1, ggplot2::aes(color = "NB1"), lty = 1) + #NB1
ggplot2::geom_smooth(method = "lm", formula = y ~ I(x^2) + offset(x) - 1, ggplot2::aes(color = "NB2"), lty = 1) + #NB2
ggplot2::geom_abline(ggplot2::aes(intercept = 0, slope = 1, color = "Poisson"), lty = 2) + #Poisson
ggplot2::scale_color_manual(name = "Families", values = c("green", "purple", "red")) +
ggplot2::labs(title = GroupName, x = "Mean", y = "Variance") +
ggplot2::theme_light() +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, face = "bold"))
if(ThemeBlack == T){
TmpPlot <- TmpPlot + theme_nocturnal()
}
assign(paste0(GroupName, "DistPlot"), TmpPlot, pos = .GlobalEnv)
}
DistFitSG(c("Year", "Site"), SgData, "Count")
Splitters <- c("Year", "Site")
Data <- SgData
CountCol <- "Count"
FullData <- get(deparse(substitute(Data)))
Count <- FullData[[CountCol]]
Params <- list()
for(i in Splitters){
Params[[i]] <- FullData[[i]]
}
VarData <- stats::aggregate(Count, Params, data = FullData, FUN = stats::var)[[length(Splitters)+1]]
FullData <- get(deparse(substitute(Data)))
Count <- FullData[[CountCol]]
Params <- list()
for(i in Splitters){
Params[[i]] <- FullData[[i]]
}
VarData <- stats::aggregate(Count, Params, FUN = stats::var)[[length(Splitters)+1]]
MeanData <- stats::aggregate(Count, Params, FUN = mean)[[length(Splitters)+1]]
MeanVarData <- as.data.frame(cbind(VarData, MeanData))
if(ThemeBlack == T){pocol = "grey80"}else{pocol = "black"}
TmpPlot <- ggplot2::ggplot(data = MeanVarData, ggplot2::aes(x = .data[["MeanData"]], y = .data[["VarData"]])) +
ggplot2::geom_point(color = pocol) +
ggplot2::geom_smooth(method = "lm", formula = y~x-1, ggplot2::aes(color = "NB1"), lty = 1) + #NB1
ggplot2::geom_smooth(method = "lm", formula = y ~ I(x^2) + offset(x) - 1, ggplot2::aes(color = "NB2"), lty = 1) + #NB2
ggplot2::geom_abline(ggplot2::aes(intercept = 0, slope = 1, color = "Poisson"), lty = 2) + #Poisson
ggplot2::scale_color_manual(name = "Families", values = c("green", "purple", "red")) +
ggplot2::labs(title = GroupName, x = "Mean", y = "Variance") +
ggplot2::theme_light() +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, face = "bold"))
if(ThemeBlack == T){
TmpPlot <- TmpPlot + theme_nocturnal()
}
assign(paste0(GroupName, "DistPlot"), TmpPlot, pos = .GlobalEnv)
DistFitSG <- function(Splitters, Data, CountCol, ThemeBlack = T){
.data <- NULL
FullData <- get(deparse(substitute(Data)))
Count <- FullData[[CountCol]]
Params <- list()
for(i in Splitters){
Params[[i]] <- FullData[[i]]
}
VarData <- stats::aggregate(Count, Params, FUN = stats::var)[[length(Splitters)+1]]
MeanData <- stats::aggregate(Count, Params, FUN = mean)[[length(Splitters)+1]]
MeanVarData <- as.data.frame(cbind(VarData, MeanData))
if(ThemeBlack == T){pocol = "grey80"}else{pocol = "black"}
TmpPlot <- ggplot2::ggplot(data = MeanVarData, ggplot2::aes(x = .data[["MeanData"]], y = .data[["VarData"]])) +
ggplot2::geom_point(color = pocol) +
ggplot2::geom_smooth(method = "lm", formula = y~x-1, ggplot2::aes(color = "NB1"), lty = 1) + #NB1
ggplot2::geom_smooth(method = "lm", formula = y ~ I(x^2) + offset(x) - 1, ggplot2::aes(color = "NB2"), lty = 1) + #NB2
ggplot2::geom_abline(ggplot2::aes(intercept = 0, slope = 1, color = "Poisson"), lty = 2) + #Poisson
ggplot2::scale_color_manual(name = "Families", values = c("green", "purple", "red")) +
ggplot2::labs(title = GroupName, x = "Mean", y = "Variance") +
ggplot2::theme_light() +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, face = "bold"))
if(ThemeBlack == T){
TmpPlot <- TmpPlot + theme_nocturnal()
}
assign(paste0(GroupName, "DistPlot"), TmpPlot, pos = .GlobalEnv)
}
DistFitSG(c("Year", "Site"), SgData, "Count")
DistFitSG <- function(Splitters, Data, CountCol, Prefix, ThemeBlack = T){
.data <- NULL
FullData <- get(deparse(substitute(Data)))
Count <- FullData[[CountCol]]
Params <- list()
for(i in Splitters){
Params[[i]] <- FullData[[i]]
}
VarData <- stats::aggregate(Count, Params, FUN = stats::var)[[length(Splitters)+1]]
MeanData <- stats::aggregate(Count, Params, FUN = mean)[[length(Splitters)+1]]
MeanVarData <- as.data.frame(cbind(VarData, MeanData))
if(ThemeBlack == T){pocol = "grey80"}else{pocol = "black"}
TmpPlot <- ggplot2::ggplot(data = MeanVarData, ggplot2::aes(x = .data[["MeanData"]], y = .data[["VarData"]])) +
ggplot2::geom_point(color = pocol) +
ggplot2::geom_smooth(method = "lm", formula = y~x-1, ggplot2::aes(color = "NB1"), lty = 1) + #NB1
ggplot2::geom_smooth(method = "lm", formula = y ~ I(x^2) + offset(x) - 1, ggplot2::aes(color = "NB2"), lty = 1) + #NB2
ggplot2::geom_abline(ggplot2::aes(intercept = 0, slope = 1, color = "Poisson"), lty = 2) + #Poisson
ggplot2::scale_color_manual(name = "Families", values = c("green", "purple", "red")) +
ggplot2::labs(title = "Prefix", x = "Mean", y = "Variance") +
ggplot2::theme_light() +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, face = "bold"))
if(ThemeBlack == T){
TmpPlot <- TmpPlot + theme_nocturnal()
}
assign(paste0(Prefix, "DistPlot"), TmpPlot, pos = .GlobalEnv)
}
DistFitSG(c("Year", "Site"), SgData, "Count", "Epfu")
library(EcoCountHelper)
DistFitSG(c("Year", "Site"), SgData, "Count", "Epfu")
EpfuDistPlot
?alias
junk <- NULL
junk
length(junk)
vignette("EcoCountHelperExample")
library(EcoCountHelper)
RealEffectText
install.packages("gitcreds")
library(gitcreds)
gitcreds::gitcreds_set()
install.packages("qrcode")
vignette(package = "qrcode")
qrcode::qrcode_gen("https://huntercole25.github.io/EcoCountHelper/")
qrcode::qrcode_gen("https://huntercole25.github.io/EcoCountHelper/")
qrcode_gen('www.r-project.org')
library(qrcode)
qrcode_gen('www.r-project.org')
qrcode_gen("https://huntercole25.github.io/EcoCountHelper/")
qrcode("https://huntercole25.github.io/EcoCountHelper/")
qr_code("https://huntercole25.github.io/EcoCountHelper/")
plot(qr_code("https://huntercole25.github.io/EcoCountHelper/"))
plot(qr_code("https://huntercole25.github.io/EcoCountHelper/"))
plot(qr_code("https://huntercole25.github.io/EcoCountHelper/EcoCountHelperExample.html"))
plot(qr_code("https://huntercole25.github.io/EcoCountHelper/EcoCountHelperExample.html"))
data("BatDataWide")
BatDataWide
BatDataWide
head(BatDataWide)
data("data/Epfu_Nb1.rda")
data("Epfu_Nb1.rda")
data("Epfu_Nb1")
data("Epfu_Nb2")
data("Epfu_Poi")
data("Epfu_ZiPoi")
data("Epfu_ZiNb1")
library(EcoCountHelper)
ModelCompare("Epfu", "TopMods")
EpfuAIC
?RealEffectText
?RealEffectTabWide()
RealEffectTabWide
data("Epfu_Nb2", "Myev_Nb2", "Epfu_Nb2_Long", "BatDataWide")
RealEffectTabWide(Epfu_Nb2, Predictors = c("YdayScale", "MoonScale"),
UnitChanges = c(10, 0.3), ScaleSds = c(2,2),
PredVects = c("Yday", "MoonPct"), Data = BatDataWide)
BatDataWide
names(BatDataWide)
RealEffectTabWide(Epfu_Nb2, Predictors = c("YdayScale", "MoonScale", "ForestScale", "DevelScale"),
UnitChanges = c(10, 0.3, 0.2, 0.2), ScaleSds = c(2,2,2,2),
PredVects = c("Yday", "MoonPct", "ManualForestPct", "ManualDEvelPct"), Data = BatDataWide)
RealEffectTabWide(Epfu_Nb2, Predictors = c("YdayScale", "MoonScale", "ForestScale", "DevelScale"),
UnitChanges = c(10, 0.3, 0.2, 0.2), ScaleSds = c(2,2,2,2),
PredVects = c("Yday", "MoonPct", "ManualForestPct", "ManualDevelPct"), Data = BatDataWide)
RealEffectTabWide(Epfu_Nb2, Predictors = c("YdayScale", "MoonScale", "ForestScale", "DevelScale"),
UnitChanges = c(10, 0.3, 0.2, 0.2), ScaleSds = c(2,2,2,2),
PredVects = c("Yday", "MoonPct", "ManualForestPct", "ManualDevelPct"), Data = BatDataWide, Pvals = F)
names(BatDataWide)
RealEffectTabWide(Epfu_Nb2, Predictors = c("YdayScale", "MoonScale", "ForestScale", "DevelScale", "WaterScale"),
UnitChanges = c(10, 0.3, 0.2, 0.2, 100), ScaleSds = c(2,2,2,2,2),
PredVects = c("Yday", "MoonPct", "ManualForestPct", "ManualDevelPct", "WaterDist"), Data = BatDataWide, Pvals = F)
library(sp)
library(raster)
library(rgdal)
raster("C:/Users/Barber Lab/Documents/GRTE_1617/Data/GisData/Elevation/GrteDemUsAea.tif")
GrteDem <- raster("C:/Users/Barber Lab/Documents/GRTE_1617/Data/GisData/Elevation/GrteDemUsAea.tif")
plot(GrteDem)
?sp::surfaceArea()
?surfaceArea()
surfaceArea(GrteDem)
?`surfaceArea,SpatialPixelsDataFrame-method`
as.matrix(GrteDem)
max(GrteDem)
surfaceArea(as.matrix(GrteDem), cellx = 7.31, celly = 10.2)
area(GrteDem)
?area
7.31*10.2*37496025
surfaceArea(as.matrix(GrteDem), cellx = 7.31, celly = 10.2)
SurfaceGrte <- surfaceArea(as.matrix(GrteDem), cellx = 7.31, celly = 10.2)
AreaGrte <- 7.31*10.2*37496025
SurfaceGrte/AreaGrte
GrteShape <- readOGR("C:/Users/Barber Lab/Documents/GRTE_1617/Data/GisData/GrandTetonBoundaries/GrteBoundariesUsAea.shp")
mask(GrteDem, GrteShape)
GrteDem
?crop()
GrteDem$dimensions
GrteDem[,1]
length(as.matrix(GrteDem))
surfaceArea(as.matrix(GrteDem), cellx = xres(GrteDem), celly = yres(GrteDem))
SurfaceGrte <- surfaceArea(as.matrix(GrteDem), cellx = xres(GrteDem), celly = yres(GrteDem))
1000*1000
1000^2
AreaGrte/1000^2
SurfaceGrte/1000^2
400*5
20000000/(400*5)
install.packages("qpdf")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(EcoCountHelper)
library(EcoCountHelper)
data("BatDataWide", package = "EcoCountHelper")
head(BatDataWide)
# data.frame syntax
BatDataWide$MoonScale <- scale2(BatDataWide$MoonPct)
# data.table syntax
BatDataWide[,MoonScale := scale2(MoonPct)]
SpeciesList <- c("Epfu", "Laci", "Lano", "Myev", "Mylu", "Myvo", "Myyu")
WideDataModeler <- function(Data, Species){
BatData <- get(deparse(substitute(Data)))
SpNb1 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom1(link = "log"))},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_Nb1"), SpNb1, pos = .GlobalEnv)
SpNb2 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom2(link = "log"))},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_Nb2"), SpNb2, pos = .GlobalEnv)
SpPoi <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = poisson(link = "log"))},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_Poi"), SpPoi, pos = .GlobalEnv)
SpZiNb1 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom1(link = "log"), ziformula = ~YdayScale + Site)},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_ZiNb1"), SpZiNb1, pos = .GlobalEnv)
SpZiNb2 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom2(link = "log"), ziformula = ~YdayScale + Site)},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_ZiNb2"), SpZiNb2, pos = .GlobalEnv)
SpZiPoi <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = poisson(link = "log"), ziformula = ~YdayScale + Site)},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_ZiPoi"), SpZiPoi, pos = .GlobalEnv)
}
SpeciesList <- c("Epfu", "Laci", "Lano", "Myev", "Mylu", "Myvo", "Myyu")
WideDataModeler <- function(Data, Species){
}
SpeciesList <- c("Epfu", "Laci", "Lano", "Myev", "Mylu", "Myvo", "Myyu")
WideDataModeler <- function(Data, Species){
BatData <- get(deparse(substitute(Data)))
SpNb1 <- glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom1(link = "log"))
SpNb2 <- glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom2(link = "log"))
SpPoi <- glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = poisson(link = "log"))
SpZiNb1 <- glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom1(link = "log"), ziformula = ~YdayScale + Site)
SpZiNb2 <- glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom2(link = "log"), ziformula = ~YdayScale + Site)
SpZiPoi <- glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = poisson(link = "log"), ziformula = ~YdayScale + Site)
}
SpeciesList <- c("Epfu", "Laci", "Lano", "Myev", "Mylu", "Myvo", "Myyu")
WideDataModeler <- function(Data, Species){
BatData <- get(deparse(substitute(Data)))
SpNb1 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom1(link = "log"))},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_Nb1"), SpNb1, pos = .GlobalEnv)
SpNb2 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom2(link = "log"))},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_Nb2"), SpNb2, pos = .GlobalEnv)
SpPoi <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = poisson(link = "log"))},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_Poi"), SpPoi, pos = .GlobalEnv)
SpZiNb1 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom1(link = "log"), ziformula = ~YdayScale + Site)},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_ZiNb1"), SpZiNb1, pos = .GlobalEnv)
SpZiNb2 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom2(link = "log"), ziformula = ~YdayScale + Site)},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_ZiNb2"), SpZiNb2, pos = .GlobalEnv)
SpZiPoi <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = poisson(link = "log"), ziformula = ~YdayScale + Site)},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_ZiPoi"), SpZiPoi, pos = .GlobalEnv)
}
lapply(SpeciesList, WideDataModeler, Data = BatDataWide)
AllDat <- data(package = "EcoCountHelper")
Items <- as.data.table(AllDat$results)
WideModels <- regmatches(Items$Item, regexpr("^[[:alpha:]]{4}_.{3,5}$", Items$Item))
data(list = WideModels)
DistFitWide(Splitters = c("Year", "Site"), Data = BatDataWide,
GroupList = SpeciesList)
data("BatDataLong")
BatDataLong
length(unique(BatDataLong$Site))
library(performance)
data("Mylu_Nb2")
check_collinearity(Mylu_Nb2)
as.data.table(check_collinearity(Mylu_Nb2))
library(tidyr)
junk <- as.data.table(check_collinearity(Mylu_Nb2))
pivot_wider(junk, names_from = "Term", values_from = "VIF")
as.data.table(pivot_wider(junk, names_from = "Term", values_from = "VIF"))
as.data.table(pivot_wider(junk, names_from = "Term", values_from = c("VIF", "SE_factor")))
