1000*1000
1000^2
AreaGrte/1000^2
SurfaceGrte/1000^2
400*5
20000000/(400*5)
install.packages("qpdf")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(EcoCountHelper)
library(EcoCountHelper)
data("BatDataWide", package = "EcoCountHelper")
head(BatDataWide)
# data.frame syntax
BatDataWide$MoonScale <- scale2(BatDataWide$MoonPct)
# data.table syntax
BatDataWide[,MoonScale := scale2(MoonPct)]
SpeciesList <- c("Epfu", "Laci", "Lano", "Myev", "Mylu", "Myvo", "Myyu")
WideDataModeler <- function(Data, Species){
BatData <- get(deparse(substitute(Data)))
SpNb1 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom1(link = "log"))},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_Nb1"), SpNb1, pos = .GlobalEnv)
SpNb2 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom2(link = "log"))},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_Nb2"), SpNb2, pos = .GlobalEnv)
SpPoi <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = poisson(link = "log"))},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_Poi"), SpPoi, pos = .GlobalEnv)
SpZiNb1 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom1(link = "log"), ziformula = ~YdayScale + Site)},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_ZiNb1"), SpZiNb1, pos = .GlobalEnv)
SpZiNb2 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom2(link = "log"), ziformula = ~YdayScale + Site)},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_ZiNb2"), SpZiNb2, pos = .GlobalEnv)
SpZiPoi <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = poisson(link = "log"), ziformula = ~YdayScale + Site)},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_ZiPoi"), SpZiPoi, pos = .GlobalEnv)
}
SpeciesList <- c("Epfu", "Laci", "Lano", "Myev", "Mylu", "Myvo", "Myyu")
WideDataModeler <- function(Data, Species){
}
SpeciesList <- c("Epfu", "Laci", "Lano", "Myev", "Mylu", "Myvo", "Myyu")
WideDataModeler <- function(Data, Species){
BatData <- get(deparse(substitute(Data)))
SpNb1 <- glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom1(link = "log"))
SpNb2 <- glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom2(link = "log"))
SpPoi <- glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = poisson(link = "log"))
SpZiNb1 <- glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom1(link = "log"), ziformula = ~YdayScale + Site)
SpZiNb2 <- glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom2(link = "log"), ziformula = ~YdayScale + Site)
SpZiPoi <- glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = poisson(link = "log"), ziformula = ~YdayScale + Site)
}
SpeciesList <- c("Epfu", "Laci", "Lano", "Myev", "Mylu", "Myvo", "Myyu")
WideDataModeler <- function(Data, Species){
BatData <- get(deparse(substitute(Data)))
SpNb1 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom1(link = "log"))},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_Nb1"), SpNb1, pos = .GlobalEnv)
SpNb2 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom2(link = "log"))},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_Nb2"), SpNb2, pos = .GlobalEnv)
SpPoi <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = poisson(link = "log"))},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_Poi"), SpPoi, pos = .GlobalEnv)
SpZiNb1 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom1(link = "log"), ziformula = ~YdayScale + Site)},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_ZiNb1"), SpZiNb1, pos = .GlobalEnv)
SpZiNb2 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom2(link = "log"), ziformula = ~YdayScale + Site)},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_ZiNb2"), SpZiNb2, pos = .GlobalEnv)
SpZiPoi <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = poisson(link = "log"), ziformula = ~YdayScale + Site)},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_ZiPoi"), SpZiPoi, pos = .GlobalEnv)
}
lapply(SpeciesList, WideDataModeler, Data = BatDataWide)
AllDat <- data(package = "EcoCountHelper")
Items <- as.data.table(AllDat$results)
WideModels <- regmatches(Items$Item, regexpr("^[[:alpha:]]{4}_.{3,5}$", Items$Item))
data(list = WideModels)
DistFitWide(Splitters = c("Year", "Site"), Data = BatDataWide,
GroupList = SpeciesList)
data("BatDataLong")
BatDataLong
length(unique(BatDataLong$Site))
library(performance)
data("Mylu_Nb2")
check_collinearity(Mylu_Nb2)
as.data.table(check_collinearity(Mylu_Nb2))
library(tidyr)
junk <- as.data.table(check_collinearity(Mylu_Nb2))
pivot_wider(junk, names_from = "Term", values_from = "VIF")
as.data.table(pivot_wider(junk, names_from = "Term", values_from = "VIF"))
as.data.table(pivot_wider(junk, names_from = "Term", values_from = c("VIF", "SE_factor")))
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
install.packages("devtools")
data("BatDataLong", package = "EcoCountHelper")
head(BatDataLong)
SpeciesList <- c("Epfu", "Laci", "Lano", "Myev", "Mylu", "Myvo", "Myyu")
WideDataModeler <- function(Data, Species){
BatData <- get(deparse(substitute(Data)))
SpNb1 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom1(link = "log"))},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_Nb1"), SpNb1, pos = .GlobalEnv)
SpNb2 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom2(link = "log"))},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_Nb2"), SpNb2, pos = .GlobalEnv)
SpPoi <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = poisson(link = "log"))},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_Poi"), SpPoi, pos = .GlobalEnv)
SpZiNb1 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom1(link = "log"), ziformula = ~YdayScale + Site)},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_ZiNb1"), SpZiNb1, pos = .GlobalEnv)
SpZiNb2 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom2(link = "log"), ziformula = ~YdayScale + Site)},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_ZiNb2"), SpZiNb2, pos = .GlobalEnv)
SpZiPoi <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = poisson(link = "log"), ziformula = ~YdayScale + Site)},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_ZiPoi"), SpZiPoi, pos = .GlobalEnv)
}
lapply(SpeciesList, WideDataModeler, Data = BatDataWide)
data("BatDataWide")
lapply(SpeciesList, WideDataModeler, Data = BatDataWide)
BAtDataWide
BatDataWide
lapply(SpeciesList, WideDataModeler, Data = BatDataWide)
SpeciesList <- c("Epfu", "Laci", "Lano", "Myev", "Mylu", "Myvo", "Myyu")
WideDataModeler <- function(Data, Species){
BatData <- get(deparse(substitute(Data)))
SpNb1 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom1(link = "log"))},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_Nb1"), SpNb1, pos = .GlobalEnv)
SpNb2 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom2(link = "log"))},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_Nb2"), SpNb2, pos = .GlobalEnv)
SpPoi <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = poisson(link = "log"))},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_Poi"), SpPoi, pos = .GlobalEnv)
SpZiNb1 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom1(link = "log"), ziformula = ~YdayScale + Site)},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_ZiNb1"), SpZiNb1, pos = .GlobalEnv)
SpZiNb2 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom2(link = "log"), ziformula = ~YdayScale + Site)},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_ZiNb2"), SpZiNb2, pos = .GlobalEnv)
SpZiPoi <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = poisson(link = "log"), ziformula = ~YdayScale + Site)},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_ZiPoi"), SpZiPoi, pos = .GlobalEnv)
}
lapply(SpeciesList, WideDataModeler, Data = BatDataWide)
library(glmmTMB)
library(data.table)
SpeciesList <- c("Epfu", "Laci", "Lano", "Myev", "Mylu", "Myvo", "Myyu")
WideDataModeler <- function(Data, Species){
BatData <- get(deparse(substitute(Data)))
SpNb1 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom1(link = "log"))},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_Nb1"), SpNb1, pos = .GlobalEnv)
SpNb2 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom2(link = "log"))},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_Nb2"), SpNb2, pos = .GlobalEnv)
SpPoi <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = poisson(link = "log"))},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_Poi"), SpPoi, pos = .GlobalEnv)
SpZiNb1 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom1(link = "log"), ziformula = ~YdayScale + Site)},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_ZiNb1"), SpZiNb1, pos = .GlobalEnv)
SpZiNb2 <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = nbinom2(link = "log"), ziformula = ~YdayScale + Site)},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_ZiNb2"), SpZiNb2, pos = .GlobalEnv)
SpZiPoi <- tryCatch({glmmTMB(BatData[[Species]] ~ StrScale + CoolScale + BrightScale + Year +
YdayScale + ElevScale + WaterScale + DevelScale + ForestScale +
MoonScale + (1|Site),
data = BatData, family = poisson(link = "log"), ziformula = ~YdayScale + Site)},
error = function(cond){return(NA)},
warning = function(cond){return(NA)})
assign(paste0(Species, "_ZiPoi"), SpZiPoi, pos = .GlobalEnv)
}
lapply(SpeciesList, WideDataModeler, Data = BatDataWide)
Models <- Filter( function(x) 'glmmTMB' %in% class( get(x) ), ls() )
lapply( Models, function(x) plot( get(x) ) )
Models
for(i in Mdoels){
for(i in Models){
usethis::use_data(get(i), internal = F, overwrite = T)
}
Models
i
get(i)
for(i in Models){
usethis::use_data(get(i), internal = F, overwrite = T)
}
deparse(substitute(i))
eval(substitute(i))
eval(deparse(i))
Models
usethis::use_data(Epfu_Nb1, internal = F, overwrite = T)
usethis::use_data(Epfu_Nb2, internal = F, overwrite = T)
usethis::use_data(Epfu_Poi, internal = F, overwrite = T)
usethis::use_data(Epfu_ZiPoi, internal = F, overwrite = T)
Models
Models[5:length(Models)]
usethis::use_data(Laci_Nb1, internal = F, overwrite = T)
usethis::use_data(Laci_Nb2, internal = F, overwrite = T)
usethis::use_data(Laci_Poi, internal = F, overwrite = T)
usethis::use_data(Lano_Nb1, internal = F, overwrite = T)
usethis::use_data(Lano_Nb2, internal = F, overwrite = T)
usethis::use_data(Lano_Poi, internal = F, overwrite = T)
usethis::use_data(Lano_ZiPoi, internal = F, overwrite = T)
Models[5:length(Models)]
usethis::use_data(Myev_Nb1, internal = F, overwrite = T)
usethis::use_data(Myev_Nb2, internal = F, overwrite = T)
usethis::use_data(Myev_Poi, internal = F, overwrite = T)
usethis::use_data(Myev_ZiPoi, internal = F, overwrite = T)
usethis::use_data(Mylu_Nb1, internal = F, overwrite = T)
usethis::use_data(Mylu_Nb2, internal = F, overwrite = T)
usethis::use_data(Mylu_Poi, internal = F, overwrite = T)
usethis::use_data(Myvo_Nb1, internal = F, overwrite = T)
usethis::use_data(Myvo_Nb2, internal = F, overwrite = T)
usethis::use_data(Myvo_Poi, internal = F, overwrite = T)
usethis::use_data(Myvo_ZiPoi, internal = F, overwrite = T)
usethis::use_data(Myyu_Nb1, internal = F, overwrite = T)
usethis::use_data(Myyu_Nb2, internal = F, overwrite = T)
usethis::use_data(Myyu_Poi, internal = F, overwrite = T)
data("Epfu_Nb1_Long")
Epfu_Nb1_Long
update(Epfu_Nb1_Long)
BatDataLong
update(Epfu_Nb1_Long, data = BatDataLong)
Epfu_Nb1_Long <- update(Epfu_Nb1_Long, data = BatDataLong)
data("Epfu_Nb2_Long")
data("Epfu_Poi_Long")
data("Epfu_ZiPoi_Long")
Epfu_Nb2_Long <- update(Epfu_Nb2_Long, data = BatDataLong)
list.files(pattern = "Long")
list.files(pattern = "Long.rda$")
list.files("./data", pattern = "Long.rda$")
list.files("./data", pattern = "_Long.rda$")
ModLong <- list.files("./data", pattern = "_Long.rda$")
for(i in ModLong){
TmpMod <- data(i)
}
warnings()
i
for(i in ModLong){
TmpMod <- data(regmatches(i, regexpr("^\\w+", i)))
}
warnings
warnings()
regmatches(i, regexpr("^\\w+", i))
TmpName <- regmatches(i, regexpr("^\\w+", i))
for(i in ModLong){
TmpName <- regmatches(i, regexpr("^\\w+", i))
TmpMod <- data(TmpName)
}
for(i in ModLong){
print(regmatches(i, regexpr("^\\w+", i)))
}
Epfu_Poi_Long <- update(Epfu_Poi_Long, data = BatDataLong)
Epfu_ZiPoi_Long <- update(Epfu_ZiPoi_Long, data = BatDataLong)
data(package = "EcoCountHeper")
data(package = "EcoCountHelper")
list(data(package = "EcoCountHelper"))
gsub("\\.rda", "", list.files("./data", pattern = "_Long"))
list(gsub("\\.rda", "", list.files("./data", pattern = "_Long")))
junk(list(gsub("\\.rda", "", list.files("./data", pattern = "_Long"))))
junk <- list(gsub("\\.rda", "", list.files("./data", pattern = "_Long")))
data(list = junk)
ModList <- list()
ModList <- list()
for(i in gsub("\\.rda", "", list.files("./data", pattern = "_Long"))){
ModList <- c(ModList, list(i))
}
ModList
data(list = ModList)
LongMod <- ls(pattern = "_Long")
LongMod
for(i in LongMod){
TmpMod <- get(i)
update(TmpMod, data = BatDataLong)
assign(i, TmpMod)
}
usethis::use_data(Epfu_Nb1_Long, internal = F, overwrite = T)
usethis::use_data(Epfu_Nb2_Long, internal = F, overwrite = T)
usethis::use_data(Epfu_Poi_Long, internal = F, overwrite = T)
usethis::use_data(Epfu_ZiPoi_Long, internal = F, overwrite = T)
usethis::use_data(Laci_Nb1_Long, internal = F, overwrite = T)
usethis::use_data(Laci_Nb2_Long, internal = F, overwrite = T)
usethis::use_data(Laci_Poi_Long, internal = F, overwrite = T)
usethis::use_data(Lano_Nb1_Long, internal = F, overwrite = T)
usethis::use_data(Lano_Nb2_Long, internal = F, overwrite = T)
usethis::use_data(Lano_Poi_Long, internal = F, overwrite = T)
usethis::use_data(Lano_ZiPoi_Long, internal = F, overwrite = T)
usethis::use_data(Myev_Nb1_Long, internal = F, overwrite = T)
usethis::use_data(Myev_Nb2_Long, internal = F, overwrite = T)
usethis::use_data(Myev_Poi_Long, internal = F, overwrite = T)
usethis::use_data(Myev_ZiPoi_Long, internal = F, overwrite = T)
usethis::use_data(Mylu_Nb1_Long, internal = F, overwrite = T)
usethis::use_data(Mylu_Nb2_Long, internal = F, overwrite = T)
usethis::use_data(Mylu_Poi_Long, internal = F, overwrite = T)
usethis::use_data(Myvo_Nb1_Long, internal = F, overwrite = T)
usethis::use_data(Myvo_Nb2_Long, internal = F, overwrite = T)
usethis::use_data(Myvo_Poi_Long, internal = F, overwrite = T)
usethis::use_data(Myvo_ZiPoi_Long, internal = F, overwrite = T)
usethis::use_data(Myyu_Nb1_Long, internal = F, overwrite = T)
usethis::use_data(Myyu_Nb2_Long, internal = F, overwrite = T)
usethis::use_data(Myyu_Poi_Long, internal = F, overwrite = T)
library(devtools)
library(roxygen2)
document()
document()
package_info("glmmTMB")
document()
document()
?document
roxygenise()
RealEffectTabLong <- function(Models, Predictors, UnitChanges, ConfInt = 95, Pvals = T, GroupCol,
GroupPat = "^[[:alnum:]]+",
ScaleSds = rep(NA, length(Predictors)), PredVects = ScaleSds,
Data = NULL, Precision = 2){
ScaleSd <- `:=` <- PredCol <- UnitCh <- rn <- `Pr(>|z|)` <- LowerConf <- DeltaPct <- UpperConf <- NULL
if("glmmTMB" %in% class(Models)){
Models <- deparse(substitute(Models))
}
FullEffects <- list()
ChangeTab <- data.table::data.table(Predictors = Predictors, UnitCh = UnitChanges,
ScaleSd = ScaleSds)
for(i in Models){
TmpMod <- get(i, envir = .GlobalEnv)
Group <- regmatches(i, regexpr(GroupPat, i))
for(j in 1:nrow(ChangeTab)){
if(is.na(ChangeTab[j,ScaleSd])==F){ChangeTab[j,PredCol := PredVects[j]]}
Predictor <- ChangeTab[j,Predictors]
UnitChange <- ChangeTab[j,UnitCh]
if(Pvals == T){
Pval <- data.table::as.data.table(
summary(TmpMod)$coeff$cond, keep.rownames=T)[rn == Predictor, round(`Pr(>|z|)`, Precision)]
}
PredBeta <- summary(TmpMod)$coeff$cond[Predictor,1]
PredSe <- summary(TmpMod)$coeff$cond[Predictor,2]
if(is.na(ChangeTab[j,ScaleSd]) == T){
TmpDat <- data.table::data.table(
Model = i,
Predictor = ChangeTab[j,Predictors],
UnitChange = UnitChange,
DeltaPct = (-(1-exp(PredBeta)^UnitChange))*100)
TmpDat[,LowerConf := round(DeltaPct -
((-(1-exp((stats::qnorm(1-((100-ConfInt)/2/100))*PredSe)))^UnitChange)*100), Precision)]
TmpDat[,UpperConf := round(DeltaPct +
((-(1-exp((stats::qnorm(1-((100-ConfInt)/2/100))*PredSe)))^UnitChange)*100), Precision)]
if(Pvals == T){
TmpDat[,Pval := Pval]
}
}else{
PredColName <- ChangeTab[j,PredCol]
PredVect <- Data[[PredColName]][Data[[GroupCol]] == Group]
TmpDat <- data.table::data.table(
Model = i,
Predictor = ChangeTab[j,Predictors],
UnitChange = UnitChange,
DeltaPct = (-(1-exp(PredBeta/(ChangeTab[j,ScaleSd]*stats::sd(PredVect)))^UnitChange))*100)
TmpDat[,LowerConf := round(DeltaPct -
(-(1-exp((stats::qnorm(1-((100-ConfInt)/2/100))*PredSe)/
(ChangeTab[j,ScaleSd]*stats::sd(PredVect)))^UnitChange))*100, Precision)]
TmpDat[,UpperConf := round(DeltaPct +
(-(1-exp((stats::qnorm(1-((100-ConfInt)/2/100))*PredSe)/
(ChangeTab[j,ScaleSd]*stats::sd(PredVect)))^UnitChange))*100, Precision)]
if(Pvals == T){
TmpDat[,Pval := Pval]
}
}
TmpDat[,DeltaPct := round(DeltaPct, Precision)]
FullEffects <- c(FullEffects, list(TmpDat))
}
}
data.table::rbindlist(FullEffects)
}
install.packages("installr")
library(installr)
?updateR()
updateR()
